cCol
cCol
yCol
yCol()
dat[[yCol()]]
dt[[cCol]]
cCol
cCol$resp
str(yCol())
str(cCol)
cCol[1]
dt[[cCol]][1]
dt[[cCol[1]]]
dt[[cCol[2]]]
ff <- as.data.frame(dt[[cCol]])
ff <- as.data.frame(cCol)
ff
dt[[]]
df[[cCol[,]]]
cCol
cCol[1]
cCol[]
df[[cCol[]]]
df[[cCol[1]]]
dt[[cCol[]]]
dt[[cCol[,]]]
cCol[,]
dt[[cCol[:]]]
cCol[]
cCol
runApp()
runApp()
cCol
cCol
cCol
runApp()
runApp()
runApp()
runApp()
cl
i
cCol
i
cl
dt[[cCol[1]]]
names(dt[[cCol[1]]])
View(dt)
names(dt)
names(dt[yCol])
names(dt[yCol()])
names(dt[[yCol()]])
dt[yCol()]
Q
runApp()
cCol
cl
runApp()
runApp()
cl
i
names(i)
dt[cCol]
runApp()
Q
runApp()
help(plot)
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
tsne
colors
colors[dt[[input$zcol]]]
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
tsne$Y
tsne$Y[1]
tsne$Y$1
tsne$Y[,1]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
res
res
res
prcomp(res)
runApp()
runApp()
runApp()
res
tsne
z <- prcomp(res)
z
runApp()
runApp()
runApp()
runApp()
res
runApp()
runApp()
runApp()
runApp()
install.packages("bubu")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
install.packages("RJason")
install.packages("rjson")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
kmeansp
kmeansp$cluster
str(kmeansp)
kmeansp$data$cluster
runApp()
runApp()
runApp()
kmeansp$data$cluster
dd.col <- rainbow(levels(kmeansp$data$cluster))
dd.col
levels(kmeansp$data$cluster)
length(kmeansp$data$cluster)
z <- levels(kmeansp$data$cluster)
z
as.numeric(z)
zz <- as.numeric(z)
length(zz)
dd.col <- rainbow(length(as.numeric(levels(kmeansp$data$cluster))))
dd.col
runApp()
runApp()
runApp()
runApp()
names(dd.col)
dd.col
names(dd.col) <- levels(kmeansp$data$cluster)
dd.col
names(dd.col)
Q
runApp()
dd.col
names(dd.col)
runApp()
help("scale_fill_manual")
runApp()
runApp()
runApp()
help(ggplotly)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
dd.col
str(kMeansResult$cluster)
z <- as.factor(kMeansResult$cluster)
z
dd.col <- rainbow(length(as.numeric(levels(as.factor(kMeansResult$cluster)))))
dd.col
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
dd.col
levels(kMeansResult$cluster)
clusterCut
Q
runApp()
dd.col
clusterCut
kMeansResult$cluster
runApp()
kMeansResult$cluster
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
d
fdf
()
asdf <- 2+2
asdf
d <- if { (asdf < 5) return("I'm so bored")} else{ "Yay"}
d <- if: (asdf < 5) return("I'm so bored") else: "Yay"}
d <- if (asdf < 5) return("I'm so bored") else ("Yay")
asdf
asdf^3
asdf
if(asdf<5)
return("Hola")
function(){if (2<3) return("Hey")}
function(2)
ñ
k
"k"
"ñ"
Hola, me llamo Andrés y estoy tela de aburrido
shiny::runApp()
runApp()
help("prcomp")
runApp()
runApp()
help("sliderInput")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
tsne
tsne
runApp()
help(prcomp)
runApp()
res
prcomp(res)
runApp()
runApp()
help(autoplot)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
res
z<-prcomp(res)
z
z$x
res
res
prcomp(res)
z <- prcomp(res)
<
z
help(prcomp=
)
help(prcomp)
runApp()
runApp()
runApp()
runApp()
res
pc
pc$x
pc$x[,1]
tsne
pc$x
res
dt[[colCol]]
dat
dt
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
help(plot_ly)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
axcol
input$axcol
'axcol'
input$axcol[61]
input$axcol[1]
res(input$axcol[1])
res
res[input$axcol[1]]
runApp()
runApp()
runApp()
runApp()
x
y
dat
x
y
nplr_df
nplr_df[y]
nplr_df[[y]]
y
yCol
xCol
dat
dat[y]
dat(y)
dat[[input$ycol]]
dat[input$ycol]
runApp()
res
input$axcol
input$axcol
input$axcol[1]
Q
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
res[1]
as.name(res[1])
as.character(res[1])
names(res[1])
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
tsne
res
prcomp(res)
tsnesum <- tsne
pcasum <- prcomp(res)
runApp()
runApp()
kMeansResult
kMeansResult
kMeansResult = kmeans(res, centers = input$num, algorithm = input$alg)
kMeansResult = kmeans(res, centers = 3, algorithm = Lloyd)
kMeansResult = kmeans(res, centers = 3, algorithm = "Lloyd")
hieclusum <- clusters
kMeansResult
hieclusum <- clusters
kmeanssum <- kmeans(dat, 3)
kMeansResult
clusters
clusterCut
runApp()
runApp()
runApp()
runApp()
runApp()
res
dat
runApp()
runApp()
res
dat
runApp()
runApp()
res
dat
runApp()
runApp()
res
dat
runApp()
shiny::runApp()
runApp()
runApp()
help(cluster.stats)
??cluster.stats
install.packages("fpc")
help(datatable)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
mySummary.nplr
str(mySummary.nplr)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
install.packages(shinyjs)
install.packages("shinyjs")
install.packages("nlstools")
install.packages("ggplot2")
install.packages("shinydashboard")
install.packages("nplr")
install.packages("DT")
install.packages("minpack.lm")
install.packages("plotly")
install.packages("Rtsne")
install.packages("fpc")
runApp()
install.packages("jsonlite")
install.packages("jsonlite")
shiny::runApp()
runApp()
runApp()
