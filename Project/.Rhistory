shiny::runApp()
install.packages("nplr")
install.packages("cran")
install.packages("nplr")
require(nplr)
path<- system.file("extdata", "example_data.txt", package="nplr")
example_data<-read.delim(path)
shiny::runApp()
runApp()
runApp()
runApp()
install.packages("XLConnect")
runApp()
install.packages("shinyjs")
runApp()
require(nplr)
path<-system.file("extdata", "pc3.txt", package="nplr")
pc3z<- read.delim(path)
np1<-nplr(x=pc3$CONC, y=pc3$GIPROP)
pc3<- read.delim(path)
np1<-nplr(x=pc3$CONC, y=pc3$GIPROP)
np1
plot(np1, cex.main = 1.2, main="PC-3 cell line. Response to Thioguanine")
plot(np1, pcol="grey40", lcol="skyblue1", showEstim=.5, showInfl=TRUE, main="Default 'nplr' plot", cex.main=1.5)
x1<- getX(np1); y1<-getYcurve(np1)
plot(x1,y1, pch=15, cex=2, col="tan1", xlab=expression(Log[10](conc)), ylab="Prop", main="Custom plot", cex.main=1.5)
plot(x1, y1, pch=15, cex=2, col="tan1", xlab=expression(Log[10](conc)),
+ ylab="Prop", main="Custom plot", cex.main=1.5)
plot(x1, y1, pch=15, cex=2, col="tan1", xlab=expression(Log[10](conc)), ylab="Prop", main="Custom plot", cex.main=1.5)
lines(x2, y2, lwd=5, col="seagreen4")
getGoodness(np1)
getStdErr(np1)
getPar(np1)
getAUC(np1)
getEstimates(np1)
getEstimates(np1,59
getEstimates(np1,5)
getEstimates(np1, c(.25, .5, .75), conf.level = .90)
path<-system.file("extdata", "mcf7.txt", package ="nplr")
mcf7<-read.delim(path)
np2<-nplr(x=mcf7$CONC, y=mcf7$GIPROP)
plot(np2, showSDerr = TRUE, lwd = 4, cex.main=1.25, main="Cell line MCF-7. Response to Irinotecan")
x<- mcf7$CONC
y<- mcf7$GIPROP
noweight<- nplr(x, y, LPweight = 0, silent = TRUE)
sdw<-nplr(x, y, method="SDW", silent
sdw<- nplr(x, y, method = "SDW", silent = TRUE)
sdw<- nplr(x, y, method = "sdw", silent = TRUE)
gw<- nplr(x, y, method = "sdw", LPweight = 1-5, silent = TRUE)
plot(np2, showEstim = .5, main="residuals weights")
plot(noweight, showEstim = .5, main="No weight")
plot(sdw, showEstim = .5, main="Stdev weights")
plot(noweight, showEstim = .5, main="general weights")
plot(sdw, showEstim = .5, main="Stdev weights")
plot(sdw, showEstim = .5, main="Stdev weights")
plot(noweight, showEstim = .5, main="No weight")
plot(np2, showEstim = .5, main="residuals weights")
path <- system.file("extdata", "prog.txt", package="nplr")
prog <- read.delim(path)
x <- prog$time
yp <- convertToProp(prog$prog, T0 = 5, Ctrl = 102)
np3<- nplr(x, yp, useLog=FALSE)
getInflexion(np3)
plot(np3, showInfl=TRUE, xlab="Time (hrs)", cex.main=1.5, cex.lab=1.2, ylab="Prop. of control", main="Progression")
plot(x, yp, pch=19, col="grey" , cex.main=1.5, cex.lab=1.2,
+ main="The n-parameter effect", xlab="Time", ylab="Progression")
plot(x, yp, pch=19, col="grey" , cex.main=1.5, cex.lab=1.2, main="The n-parameter effect", xlab="Time", ylab="Progression")
le <- c()
for(i in 2:5){ test <- nplr(x, yp, npars = i, useLog = FALSE) lines(getXcurve(test), getYcurve(test), lwd = 2, col = i) goodness <- getGoodness(test) gof <- goodness$gof le <- c(le, sprintf("%s-P: GOF=%s", i, round(gof, 4)))}
for(i in 2:5) {
test<-nplr(x, yp, npars =i, useLog = FALSE)
lines(getXcurve(test), getYcurve(test), lwd=2, col = i)
goodness<- goodness$gof
le<- c(le, sprintf("%s-P: GOF=%s", i, round(gof, 4)))
}
for(i in 2:5) {
test<-nplr(x, yp, npars =i, useLog = FALSE)
lines(getXcurve(test), getYcurve(test), lwd=2, col = i)
goodness<- getGoodness(test)
gof<- goodness$gof
le<- c(le, sprintf("%s-P: GOF=%s", i, round(gof, 4)))
}
legend("bottomright", legend=le, lwd=2, col = 2:5, bty="n")
runApp()
runApp()
runApp()
warnings()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
