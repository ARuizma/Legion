runApp()
typeof(df2())
str(df2())
length(df2())
length(unique(df2()))
nrow(df2())
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
help(tabItem)
runApp('pruebas.R')
runApp('pruebas.R')
runApp('pruebas.R')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('pruebas.R')
runApp()
runApp('pruebas.R')
runApp('pruebas.R')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
as.numeric(unlist(dat[input$xcol]))
prueba
df2()
shiny::runApp()
runApp()
dat[input$xcol]
input$xcol
str(input$xcol)
runApp()
runApp()
dat[[xCol]]
dat
dat
df()
runApp()
runApp()
runApp()
df
df()
runApp()
df
df()
runApp()
df()
dat
runApp()
dat
xCol
yCol
dat[[xCol]]
dat[[yCol]]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
df2()
dfw()
df2()
df()
runApp()
df()
df2()
models
nplr
runApp()
df()
runApp()
df2()
runApp()
runApp()
df()
df2()
runApp()
df2()
datalist()
runApp()
df2()
runApp()
runApp()
df2()
runApp()
runApp()
df2()
runApp()
df2()
xCol
xCol()
runApp()
df2()
runApp()
df2()
runApp()
runApp()
df2()
runApp()
runApp()
df2()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
help(ggplot)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
help(cut)
runApp()
dat
df()
gg
runApp()
runApp()
df()
gg
x
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
gg
runApp()
gg
runApp()
df2()
df()[[yCol]]
runApp()
runApp()
runApp()
colnames(dat)
dat
dat[[xCol]]
runApp()
dat[[xCol]]
length(dat[[xCol]])
runApp()
length(seq(min(x), max(x), by = 0.01))
dat[[xCol]]
gg
df2()
gg
levels(gg[[compoundCol]])
levels(dat[[compoundCol]])
dat[[compoundCol]]
gg[[compoundCol]]
runApp()
runApp()
runApp()
runApp()
runApp()
gg
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
gg[[xCol]]
runApp()
gg[[xCol]]
gg[yCol]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
as.name(input$zcol)
as.name(dat[[compoundCol]])
as.name(compoundCol)
as.name(input$zcol)
dat[[compoundCol]]
runApp()
dat[[compoundCol]]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
cc
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
gg$input$zcol
gg[[compoundCol]]
df[[compoundCol]]
dat[[compoundCol]]
dat$input$zcol
[[compoundCol]]
dat[compoundCol]
runApp()
runApp()
runApp()
gg$compoundCol
gg[[compoundCol]]
as.name(input$zcol)
as.list(input$zcol)
unlist(input$zcol)
as.factor(input$zcol)
input$zcol
as.numeric(cell)
as.numeric(input$zcol)
as.name(unlist(input$zcol))
data.frame(input$zcol)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
dat
runApp()
dat
length(dat[[xCol]])
length(dat[[yCol]])
length(dat[[compoundCol]])
ggplot(data = dat, aes(x=dat[[xCol]], y=dat[[yCol]], colour = dat[[compoundCol]]))
p1 <- ggplot(data = dat, aes(x=dat[[xCol]], y=dat[[yCol]], colour = dat[[compoundCol]]))
plot(p1)
p1 <- ggplot(data = dat, aes(x=dat[[xCol]], y=dat[[yCol]], colour = dat[[compoundCol]])) +
geom_point()
p1
plot(p1)
runApp()
runApp()
gg
runApp()
gg
dat
x
length(x)
unique(x)
help(seq)
seq(min(x), max(x), length.out = )
length(dat)
dat
dat[,1]
length(dat[,1])
seq(min(x), max(x), length.out = length(dat[,1]))
length(seq(min(x), max(x), length.out = length(dat[,1])))
length(seq(min(x), max(x), length.out = length(dat[,1])/length(unique(dat[[compoundCol]]))))
runApp()
length(gg)
gg
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
dat2
runApp()
runApp()
runApp()
help(convertToProp)
runApp()
runApp()
runApp()
df2
df3
df3()
df3 <- reactive({
if(is.null(df()))
return(NULL)
df <- df()
df[[yCol]] <- convertToProp(df[[yCol]], T0 = NULL, Ctrl = NULL)
})
df()[[yCol]]
df()[[yCol]] <- convertToProp(df[[yCol]], T0 = NULL, Ctrl = NULL)
str(df[[yCol]])
str(df[[yCol]])
df[[yCol]]
runApp()
df[[yCol]]
df()[[yCol]]
df()[[yCol]] <- convertToProp(df()[[yCol]], T0 = NULL, Ctrl = NULL)
df()[[yCol]]
df3 <- reactive({
+     if(is.null(df()))
+         return(NULL)
+     df5 <- df()
+     df5[[yCol]] <- convertToProp(df5[[yCol]], T0 = NULL, Ctrl = NULL)
+ })
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
levels(dat[[compoundCol]])
dat
dat[[compoundCol]]
dat$Compound
dat$input$zcol
dat$cell
df()
df()[[yCol]]
dat[[compoundCol()]]
runApp()
runApp()
install.packages("DT")
runApp()
runApp()
help("renderDataTable")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
str(mySummary)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
help(loglp)
??loglp
log10(1)
log10(0)
log1p(0)
log1p(1)
runApp()
log1p(13)
log1p(0.025)
help(log1p)
runApp()
runApp()
runApp()
runApp()
runApp()
x
log10(x)
runApp()
log(0)
log(0, base = exp(2))
log2(0)
log1p(0)
runApp()
runApp()
dat[[xCol]]
runApp()
runApp()
runApp()
runApp()
runApp()
dat[[xCol]]
str(dat[[xCol]])
length(dat[[xCol]])
runApp()
log1p(-Inf)
log10(-Inf)
log(-Inf)
min(dat[[xCol]])
runApp()
min(dat[[xCol]])
dat
dat
min(dat[[xCol]])
runApp()
runApp()
dat[[xCol]]
runApp()
dat[[xCol]]
test <- dat[[xCol]][dat[[xCol]] == -8] <- 800
test
test <- [dat[[xCol]] == -8] <- 800
dat$xCol[dat$xCol == -8] <- 1
dat$xCol
dat
dat[[xCol]][dat[[xCol]] == -1] <- 100
dat[[xCol]]
runApp()
dat[[xCol]]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
df()
dat3
dat3()
runApp()
df()
dat3
dat3()
data
dat2()
dat2
df()
runApp()
dat
df
df()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
df()
runApp()
runApp()
xLog
xLog()
runApp()
df()
df()[[xLog]]
xLog
xLog()
str(xLog)
str(xLog())
as.name(str(xLog()))
as.name(xLog())
as.name(xCol())
runApp()
runApp()
df8()
df8
df()
df3
df3()
datalist2()
runApp()
runApp()
runApp()
runApp()
