help(rbind)
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
help(quantile)
runApp()
runApp()
runApp()
infile
start
param
x
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
help(geom_smooth)
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
param(data)
data
data()
dat
str(dat)
runApp()
runApp()
data
dat
input
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
models
data_Y
data_y
data_y
"data_y"
models
data
data()
data()
runApp()
runApp()
runApp()
runApp()
View(addXaxis)
View(addXaxis)
View(buildSummary)
View(convertToProp)
View(convertToProp)
View(nplr)
View(overlay)
View(overlay)
View(overlay)
View(overlay)
View(plot.nplr)
View(plot.nplr)
View(summary.nplr)
View(summary.nplr)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
models
models()
data
data()
xcol
input$xcol
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
data()
models
models()
View(buildSummary)
View(buildSummary)
View(addXaxis)
runApp()
test()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
test()
runApp()
df2
df2()
df2()
df2
runApp()
test()
test
models
models()
logistic
runApp()
runApp()
runApp()
runApp()
test()
test()
runApp()
runApp()
runApp()
test()
models
test
test()
logistic()
logistic()
test()
print(test())
models
typeof(logistic())
data()
dat
input
test
test()
Q
runApp()
runApp()
data()
test()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
data()
print(models)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
data(9
runApp()
data()
datalist
datalist()
df
data(
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(nplr)
print(models)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
data()
datalist()
df2()
test()
models
print(data())
print(models)
help(return)
runApp()
runApp()
shinyServer(function(input, output, session) {
df <- reactive ({
infile <- input$file1
if(is.null(infile))
return(NULL)
df<- read.csv(infile$datapath, header=input$header, sep=input$sep, check.names = FALSE)
observe({
updateSelectInput(session, 'zcol', choices = names(df), selected=names(df)[1])
updateSelectInput(session, 'xcol', choices = names(df), selected=names(df)[2])
updateSelectInput(session, 'ycol', choices = names(df), selected=names(df)[3])
})
return(df)
})
output$content<-renderTable({df()})
#browser()
#NPLRTEST####
df2<- reactive ({
df()[,input$zcol]
})
datalist <- reactive({
if(is.null(df()))
return(NULL)
split(df(), df2())
})
test <- reactive({
if(is.null(datalist()))
return(NULL)
models <- lapply(datalist(), function(tmp){
x <- tmp[,input$xcol]
y <- tmp[,input$ycol]
if(!is.numeric(x) || !is.numeric(y))
return(NULL)
if(input$props){
y <- convertToProp(y, T0=NULL, Ctrl = NULL)
nplr(x, y, npars = "all", useLog = input$toLog, silent=TRUE)
}
})
models
})
param <- reactive({
if(is.null(test()))
return(NULL)
models <- test()
B <- getPar(models)$params$bottom
TT <- getPar(models)$params$top
xmid <- getPar(models)$params$xmid
s <- getPar(models)$params$s
bb <- getPar(models)$params$scal
})
logistic <- function(x){
(param()$B+(param()$TT-param()$B)/(1+10^(param()$bb*(param()$xmid - x)))^param()$s)
}
output$plot <- renderPlot({
if(is.null(df()))
return(NULL)
dat <- df()
ggplot(dat, aes(x=x, y=y)) + stat_function(fun = logistic()) #+ facet_wrap(~input$zcol, scales = "free") + stat_summary(fun.y = "mean", colour = "Red", geom = "point", size = 5) #geom_point(aes(colour = Compound))
})
#output$summary <- renderTable({
#models <- data()
#if(is.null(models))
#return(NULL)
#buildSummary(models)
#})
})
runApp()
View(dat)
datalist()
names(datalist())
df
df()
df2()
test()
runApp()
runApp()
test()
params
params()
param()
B
getPar(models)
getPar(test())
getPar(df())
getPar(datalist())
getPar($MummyHunter)
getPar(MummyHunter)
getPar("MummyHunter")
getPar("models")
df
df()
getPar(cell$MummyHunter)
runApp()
runApp()
runApp()
getPar(model)
runApp()
runApp()
B
param()$B
getPar(model)$params$bottom
models
test()
test()
runApp()
test()
datalist()
df()
datalist()
df()
datalist()
ggplot
nplr
logistic
param()
runApp()
param()
B
runApp()
B()
TT()
scal()
s()
xmid()
test()$x
[,input$xcol]
input$xcol
nplr$x
input$ycol
input$zcol
as.list(input$xcol)
as.name(input$xcol)
tmp(input$xcol)
x
as.vector(input$xcol)
input$xcol
unlist(input$xcol)
df[,input$xcol]
as.data.frame(input$xcol)
[,input$xcol]
,input$xcol
runApp()
runApp()
runApp()
df
df()
df()$input$xcol
df(input$xcol)
datalist()
datalist()$x
nplr
nplr()
nplr(x, y, npars="all", useLog = input$toLog, silent = TRUE)
test()
runApp()
runApp()
runApp()
dat
dat$input$xcol
conc
df()name$xcol
df()$xcol
df()$input$xcol
input$xcol
xcol
df()[xcol]
df()[input$xcol]
dat[input$xcol]
runApp()
runApp()
runApp()
runApp()
df()
dat
dat[input$xcol]
x
runApp()
runApp()
df()[input$xcol]
x
dat
runApp()
runApp()
df()[input$xcol]
x
B
B()
B()
runApp()
B()
x
x <- df()[input$xcol]
runApp()
runApp()
runApp()
runApp()
dat[input$ycol]
TT()
B()
datalist()
datalist()[input$xcol]
datalist()[,2]
datalist()[2]
datalist()[,]
names(datalist())
datalist()[,input$xcol]
datalist()[3]
typeof(datalist())
typeof(df())
datalist()[x]
df2
df2()
shiny::runApp()
runApp()
TT()
B()
model
test()
datalist()
df2()
str(datalist())
str(datalist()$easyRider)
runApp()
runApp()
dat[input$xcol]
dat[input$zcol]
help(ggplot)
runApp()
dat
input
input$xcol
dat[input$xcol]
input$zcol
input$ycol
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
