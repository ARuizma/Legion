runApp()
runApp()
runApp()
runApp()
help("scale_fill_manual")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("plotly")
install.packages("plotly")
shiny::runApp()
runApp()
help(ggplotly)
??ggplotly
??plotly
install.packages("plotly")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
help("ggplotly")
runApp()
runApp()
runApp()
runApp()
install_version("plotly", version = "4.6.0", repos = "http://cran.us.r-project.org")
require(devtools)
install_version("plotly", version = "4.6.0", repos = "http://cran.us.r-project.org")
runApp()
runApp()
install.packages("htmltools")
runApp()
runApp()
install.packages("htmltools")
install.packages("htmltools")
shiny::runApp()
require(devtools)
install_version("plotly", version = "4.6.0", repos = "http://cran.us.r-project.org")
install_version("plotly", version = "4.6.0", repos = "http://cran.us.r-project.org")
install.package("plotly")
install.packages("plotly")
install_version("plotly", version = "4.6.0", repos = "http://cran.us.r-project.org")
runApp()
runApp()
runApp()
devtools::install_github('hadley/ggplot2')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
help(ggplotly)
runApp()
runApp()
runApp()
runApp()
devtools::install_github('hadley/ggplot2')
shiny::runApp()
install.packages("ggplot2")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
his
df()
df()
his
xCol
his[[xCol]]
runApp()
runApp()
runApp()
df()
his
xCol
his[[xCol]]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
exp(0.45)
log(2.82)
log10(2.82)
help(exp)
10^0.45
10^-0.7688
runApp()
runApp()
runApp()
sumi$value[["xInfl"]]
10^sumi$value[["xInfl"]]
str(sumi$value[["xInfl"]])
as.numeric(sumi$value[["xInfl"]])
as.character(sumi$value[["xInfl"]])
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
install.packages("XLConnect")
runApp()
install.packages("XLConnectJars")
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
install.packages("tsne")
install.packages("Rtsne")
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
dt
tsne
tsn
runApp()
Q
runApp()
runApp()
runApp()
Labels
dt$input$zcol
dt
dat$input$zcol
dat[[input$zcol]]
dt[[input$zcol]]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
cCol
cCol
cCol
yCol
yCol()
dat[[yCol()]]
dt[[cCol]]
cCol
cCol$resp
str(yCol())
str(cCol)
cCol[1]
dt[[cCol]][1]
dt[[cCol[1]]]
dt[[cCol[2]]]
ff <- as.data.frame(dt[[cCol]])
ff <- as.data.frame(cCol)
ff
dt[[]]
df[[cCol[,]]]
cCol
cCol[1]
cCol[]
df[[cCol[]]]
df[[cCol[1]]]
dt[[cCol[]]]
dt[[cCol[,]]]
cCol[,]
dt[[cCol[:]]]
cCol[]
cCol
runApp()
runApp()
cCol
cCol
cCol
runApp()
runApp()
runApp()
runApp()
cl
i
cCol
i
cl
dt[[cCol[1]]]
names(dt[[cCol[1]]])
View(dt)
names(dt)
names(dt[yCol])
names(dt[yCol()])
names(dt[[yCol()]])
dt[yCol()]
Q
runApp()
cCol
cl
runApp()
runApp()
cl
i
names(i)
dt[cCol]
runApp()
Q
runApp()
help(plot)
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
tsne
colors
colors[dt[[input$zcol]]]
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
tsne$Y
tsne$Y[1]
tsne$Y$1
tsne$Y[,1]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
res
res
res
prcomp(res)
runApp()
runApp()
runApp()
res
tsne
z <- prcomp(res)
z
runApp()
runApp()
runApp()
runApp()
res
runApp()
runApp()
runApp()
runApp()
install.packages("bubu")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
install.packages("RJason")
install.packages("rjson")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
kmeansp
kmeansp$cluster
str(kmeansp)
kmeansp$data$cluster
runApp()
runApp()
runApp()
kmeansp$data$cluster
dd.col <- rainbow(levels(kmeansp$data$cluster))
dd.col
levels(kmeansp$data$cluster)
length(kmeansp$data$cluster)
z <- levels(kmeansp$data$cluster)
z
as.numeric(z)
zz <- as.numeric(z)
length(zz)
dd.col <- rainbow(length(as.numeric(levels(kmeansp$data$cluster))))
dd.col
runApp()
runApp()
runApp()
runApp()
names(dd.col)
dd.col
names(dd.col) <- levels(kmeansp$data$cluster)
dd.col
names(dd.col)
Q
runApp()
dd.col
names(dd.col)
runApp()
help("scale_fill_manual")
runApp()
runApp()
runApp()
help(ggplotly)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
dd.col
str(kMeansResult$cluster)
z <- as.factor(kMeansResult$cluster)
z
dd.col <- rainbow(length(as.numeric(levels(as.factor(kMeansResult$cluster)))))
dd.col
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
dd.col
levels(kMeansResult$cluster)
clusterCut
Q
runApp()
dd.col
clusterCut
kMeansResult$cluster
runApp()
kMeansResult$cluster
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
d
fdf
()
asdf <- 2+2
asdf
d <- if { (asdf < 5) return("I'm so bored")} else{ "Yay"}
d <- if: (asdf < 5) return("I'm so bored") else: "Yay"}
d <- if (asdf < 5) return("I'm so bored") else ("Yay")
asdf
asdf^3
asdf
if(asdf<5)
return("Hola")
function(){if (2<3) return("Hey")}
function(2)
ñ
k
"k"
"ñ"
Hola, me llamo Andrés y estoy tela de aburrido
shiny::runApp()
runApp()
help("prcomp")
runApp()
runApp()
help("sliderInput")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
