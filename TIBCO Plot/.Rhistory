runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("dataset")
shinyServer(function(input, output) {
createPlot <- function(df, colx, coly) {
x <- names(df)[colx]
y <- names(df)[coly]
ggplot(data=df, aes_string(x = x, y = y) ) + geom_line()
}
Y <- reactive({
x
})
# Generate a summary of the dataset
output$summary <- renderPrint({
dataset <- x
summary(dataset)
})
# Show the first "n" observations
output$view <- renderTable({
head(x, n = input$obs)
})
# create line plot (I took this from https://gist.github.com/pssguy/4171750)
output$plot <- reactivePlot(function() {
df <- Y()
print(createPlot(df, colx=input$xa, coly=input$ya))
})
})
shinyUI(pageWithSidebar(
# Application title
headerPanel("Sample Proj"),
# Sidebar with controls to select a dataset and specify the number
# of observations to view
sidebarPanel(
numericInput("obs", "Number of observations to view:", 10)
,numericInput("xa", "Column to plot as X-axis:", 5)
,numericInput("ya", "Column to plot as Y-axis:", 6)
),
# Show a summary of the dataset and an HTML table with the requested
# number of observations
mainPanel(
tabsetPanel(
tabPanel("Table", tableOutput("view")),
tabPanel("LineGraph", plotOutput("plot"))
)
)
))
shiny::runApp()
help(fill)
runApp()
runApp()
help(aes_string)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
help(mean)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
help(summary)
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
??start.list
runApp()
runApp()
runApp()
help(iter)
??iter
runApp()
help(cex.main)
??cex.main
runApp()
runApp()
runApp()
runApp()
help("geom_smooth")
runApp()
runApp()
help(quantile)
help(abs)
help(floor)
help(quantile)
help(start)
help("which.min")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
require(nplr)
runApp()
runApp()
runApp()
runApp()
runApp()
Q
help(nplr)
runApp()
clear
clc
clean
runApp()
typeof(data)
typeof(test)
typeof(models)
typeof(data())
typeof(datalist)
typeof(input$xcol)
typeof(x)
typeof(xcol)
runApp()
typeof(data)
typeof(xcol)
typeof(x)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
help(do.call)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
typeof(datalist)
typeof(input$zcol)
typeof(z)
typeof("z")
typeof("x")
typeof(x)
typeof("datalist")
typeof(test())
typeof(test)
typeof(models)
typeof(data)
runApp()
runApp()
typeof(data)
help(apply)
help(lapply)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
help(las)
??las
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
help(melt)
??melt
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
print(x)
print(y)
print(log(x))
print(x)
x + 0.0001
log (x + 0.0001)
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
print(models)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
print(model)
print(models)
runApp()
print(model)
models
model
"model"
Q
runApp()
test(9
test()
test()
print(test())
models
data()
datalist()
df2()
df2
df2()
print(df2())
runApp()
runApp()
runApp()
datalist()
log(datalist())
log10(datalist()=
log10(datalist())
data()
log(data())
log(x)
log(xcol)
log(input$xcol)
x
runApp()
models
datalist()
test()
test
x
"x"
runApp()
runApp()
runApp()
models
x
runApp()
x
y
z
tu puta madre
models
x
datalist()
df
print(df)
data()
log(data[,2])
runApp()
help(split)
runApp()
runApp()
print(x)
print(x)
print(y)
print(z)
x
models
model
test
x
runApp()
data(9
)
data()
data(x)
data([,2])
data()
data()
x
y
runApp()
data()
help(infl)
??infle
??infl
runApp()
c
c
c
c
c
c
runApp()
runApp()
warnings()
??.multicurve
help(multicurve)
??multicurve
help(function)
help(function
)
??function()
help(function())
??function
??function
help
help(
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
help(do.call)
help(c)
help(rbind)
runApp()
runApp()
runApp()
runApp()
