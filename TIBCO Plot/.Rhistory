p <- p + stat_function(geom = "line", fun = plotMixMdlComps,
arg = list(clusterDf[i, "mu"],
clusterDf[i, "sigma"],
clusterDf[i, "lambda"]),
lwd = 1.5, colour = cols[i])
}
p
gg_color_hue <- function(n) {
hues = seq(15, 375, length=n+1)
hcl(h=hues, l=65, c=100)[1:n]
}
plotMixMdlComps <- function(x, mu, sigma, lam) {
lam * dnorm(x, mu, sigma )
}
clusterDf <- data.frame(cluster = c(6,5,4,8,0,7,3),
mu = c(0.73908779, 0.43233777, 0.28041006, 0.35627709,
0.09330585, 0.18250758, 0.56998734),
sigma = c(0.06472281, 0.03218096, 0.02779751,
0.02208605, 0.02716692, 0.01890661,
0.02995616),
lambda = c(0.042749908, 0.254485536, 0.205602343,
0.404705236, 0.061058220, 0.024166972,
0.007231783))
inDf <- data.frame(x = c(0,1))
p <- ggplot(inDf, aes(x)) +
xlim(0,1) +
ylim(0,10)
for (i in 1:nrow(clusterDf)) {
p <- p + stat_function(geom = "line", fun = plotMixMdlComps,
arg = list(clusterDf[i, "mu"],
clusterDf[i, "sigma"],
clusterDf[i, "lambda"]),
lwd = 1.5)
}
p
rm(list=ls())
dev.off()
gg_color_hue <- function(n) {
hues = seq(15, 375, length=n+1)
hcl(h=hues, l=65, c=100)[1:n]
}
plotMixMdlComps <- function(x, mu, sigma, lam) {
lam * dnorm(x, mu, sigma )
}
clusterDf <- data.frame(cluster = c(6,5,4,8,0,7,3),
mu = c(0.73908779, 0.43233777, 0.28041006, 0.35627709,
0.09330585, 0.18250758, 0.56998734),
sigma = c(0.06472281, 0.03218096, 0.02779751,
0.02208605, 0.02716692, 0.01890661,
0.02995616),
lam = c(0.042749908, 0.254485536, 0.205602343,
0.404705236, 0.061058220, 0.024166972,
0.007231783))
inDf <- data.frame(x = c(0,1))
p <- ggplot(inDf, aes(x)) +
xlim(0,1) +
ylim(0,10)
for (i in 1:nrow(clusterDf)) {
p <- p + stat_function(geom = "line", fun = plotMixMdlComps,
arg = list(clusterDf[i, "mu"],
clusterDf[i, "sigma"],
clusterDf[i, "lambda"]),
lwd = 1.5)
}
p
rm(list=ls())
dev.off()
gg_color_hue <- function(n) {
hues = seq(15, 375, length=n+1)
hcl(h=hues, l=65, c=100)[1:n]
}
plotMixMdlComps <- function(x, mu, sigma, lam) {
lam * dnorm(x, mu, sigma )
}
clusterDf <- data.frame(cluster = c(6,5,4,8,0,7,3),
mu = c(0.73908779, 0.43233777, 0.28041006, 0.35627709,
0.09330585, 0.18250758, 0.56998734),
sigma = c(0.06472281, 0.03218096, 0.02779751,
0.02208605, 0.02716692, 0.01890661,
0.02995616),
lam = c(0.042749908, 0.254485536, 0.205602343,
0.404705236, 0.061058220, 0.024166972,
0.007231783))
inDf <- data.frame(x = c(0,1))
p <- ggplot(inDf, aes(x)) +
xlim(0,1) +
ylim(0,10)
for (i in 1:nrow(clusterDf)) {
p <- p + stat_function(geom = "line", fun = plotMixMdlComps,
arg = list(clusterDf[i, "mu"],
clusterDf[i, "sigma"],
clusterDf[i, "lam"]),
lwd = 1.5)
}
p
rm(list=ls())
dev.off()
gg_color_hue <- function(n) {
hues = seq(15, 375, length=n+1)
hcl(h=hues, l=65, c=100)[1:n]
}
plotMixMdlComps <- function(x, mu, sigma, lam) {
lam * dnorm(x, mu, sigma )
}
clusterDf <- data.frame(cluster = c(6,5,4,8,0,7,3),
mu = c(0.73908779, 0.43233777, 0.28041006, 0.35627709,
0.09330585, 0.18250758, 0.56998734),
sigma = c(0.06472281, 0.03218096, 0.02779751,
0.02208605, 0.02716692, 0.01890661,
0.02995616),
lam = c(0.042749908, 0.254485536, 0.205602343,
0.404705236, 0.061058220, 0.024166972,
0.007231783))
inDf <- data.frame(x = c(0,1))
p <- ggplot(inDf, aes(x)) +
xlim(0,1) +
ylim(0,10)
for (i in 1:nrow(clusterDf)) {
p <- p + stat_function(geom = "line", fun = plotMixMdlComps,
args = list(clusterDf[i, "mu"],
clusterDf[i, "sigma"],
clusterDf[i, "lam"]),
lwd = 1.5)
}
p
clusterDf
nrow(clusterDF)
nrow("clusterDF")
rm(list=ls())
dev.off()
gg_color_hue <- function(n) {
hues = seq(15, 375, length=n+1)
hcl(h=hues, l=65, c=100)[1:n]
}
plotMixMdlComps <- function(x, mu, sigma, lam) {
lam * dnorm(x, mu, sigma )
}
clusterDf <- data.frame(cluster = c(6,5,4,8,0,7,3),
mu = c(0.73908779, 0.43233777, 0.28041006, 0.35627709,
0.09330585, 0.18250758, 0.56998734),
sigma = c(0.06472281, 0.03218096, 0.02779751,
0.02208605, 0.02716692, 0.01890661,
0.02995616),
lam = c(0.042749908, 0.254485536, 0.205602343,
0.404705236, 0.061058220, 0.024166972,
0.007231783))
inDf <- data.frame(x = c(0,1))
p <- ggplot(inDf, aes(x)) +
xlim(0,1) +
ylim(0,10)
for (i in 1:nrow(clusterDf)) {
p <- p + stat_function(geom = "line", fun = plotMixMdlComps,
lwd = 1.5)
}
p
help(geom_smooth)
help(sd)
runApp()
help(scales)
runApp()
runApp()
runApp()
runApp()
unique(dat[input$zcol])
runApp()
runApp()
runApp()
runApp()
runApp()
B
B[n]
B[1]
B
logistic[n]
runApp()
getPar(prueba)$params$bottom
runApp()
getPar(prueba)$params$bottom
getPar(prueba)
shiny::runApp()
runApp()
df2()
names(df2())
unique(df2())
as.numeric(unlist(dat[input$xcol]))
runApp()
runApp()
runApp()
typeof(df2())
str(df2())
length(df2())
length(unique(df2()))
nrow(df2())
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
help(tabItem)
runApp('pruebas.R')
runApp('pruebas.R')
runApp('pruebas.R')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('pruebas.R')
runApp()
runApp('pruebas.R')
runApp('pruebas.R')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
as.numeric(unlist(dat[input$xcol]))
prueba
df2()
shiny::runApp()
runApp()
dat[input$xcol]
input$xcol
str(input$xcol)
runApp()
runApp()
dat[[xCol]]
dat
dat
df()
runApp()
runApp()
runApp()
df
df()
runApp()
df
df()
runApp()
df()
dat
runApp()
dat
xCol
yCol
dat[[xCol]]
dat[[yCol]]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
df2()
dfw()
df2()
df()
runApp()
df()
df2()
models
nplr
runApp()
df()
runApp()
df2()
runApp()
runApp()
df()
df2()
runApp()
df2()
datalist()
runApp()
df2()
runApp()
runApp()
df2()
runApp()
runApp()
df2()
runApp()
df2()
xCol
xCol()
runApp()
df2()
runApp()
df2()
runApp()
runApp()
df2()
runApp()
runApp()
df2()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
help(ggplot)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
help(cut)
runApp()
dat
df()
gg
runApp()
runApp()
df()
gg
x
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
gg
runApp()
gg
runApp()
df2()
df()[[yCol]]
runApp()
runApp()
runApp()
colnames(dat)
dat
dat[[xCol]]
runApp()
dat[[xCol]]
length(dat[[xCol]])
runApp()
length(seq(min(x), max(x), by = 0.01))
dat[[xCol]]
gg
df2()
gg
levels(gg[[compoundCol]])
levels(dat[[compoundCol]])
dat[[compoundCol]]
gg[[compoundCol]]
runApp()
runApp()
runApp()
runApp()
runApp()
gg
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
gg[[xCol]]
runApp()
gg[[xCol]]
gg[yCol]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
as.name(input$zcol)
as.name(dat[[compoundCol]])
as.name(compoundCol)
as.name(input$zcol)
dat[[compoundCol]]
runApp()
dat[[compoundCol]]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
cc
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
gg$input$zcol
gg[[compoundCol]]
df[[compoundCol]]
dat[[compoundCol]]
dat$input$zcol
[[compoundCol]]
dat[compoundCol]
runApp()
runApp()
runApp()
gg$compoundCol
gg[[compoundCol]]
as.name(input$zcol)
as.list(input$zcol)
unlist(input$zcol)
as.factor(input$zcol)
input$zcol
as.numeric(cell)
as.numeric(input$zcol)
as.name(unlist(input$zcol))
data.frame(input$zcol)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
dat
runApp()
dat
length(dat[[xCol]])
length(dat[[yCol]])
length(dat[[compoundCol]])
ggplot(data = dat, aes(x=dat[[xCol]], y=dat[[yCol]], colour = dat[[compoundCol]]))
p1 <- ggplot(data = dat, aes(x=dat[[xCol]], y=dat[[yCol]], colour = dat[[compoundCol]]))
plot(p1)
p1 <- ggplot(data = dat, aes(x=dat[[xCol]], y=dat[[yCol]], colour = dat[[compoundCol]])) +
geom_point()
p1
plot(p1)
runApp()
runApp()
gg
runApp()
gg
dat
x
length(x)
unique(x)
help(seq)
seq(min(x), max(x), length.out = )
length(dat)
dat
dat[,1]
length(dat[,1])
seq(min(x), max(x), length.out = length(dat[,1]))
length(seq(min(x), max(x), length.out = length(dat[,1])))
length(seq(min(x), max(x), length.out = length(dat[,1])/length(unique(dat[[compoundCol]]))))
runApp()
length(gg)
gg
runApp()
runApp()
runApp()
runApp()
runApp()
