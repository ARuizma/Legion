nplr
logistic
param()
runApp()
param()
B
runApp()
B()
TT()
scal()
s()
xmid()
test()$x
[,input$xcol]
input$xcol
nplr$x
input$ycol
input$zcol
as.list(input$xcol)
as.name(input$xcol)
tmp(input$xcol)
x
as.vector(input$xcol)
input$xcol
unlist(input$xcol)
df[,input$xcol]
as.data.frame(input$xcol)
[,input$xcol]
,input$xcol
runApp()
runApp()
runApp()
df
df()
df()$input$xcol
df(input$xcol)
datalist()
datalist()$x
nplr
nplr()
nplr(x, y, npars="all", useLog = input$toLog, silent = TRUE)
test()
runApp()
runApp()
runApp()
dat
dat$input$xcol
conc
df()name$xcol
df()$xcol
df()$input$xcol
input$xcol
xcol
df()[xcol]
df()[input$xcol]
dat[input$xcol]
runApp()
runApp()
runApp()
runApp()
df()
dat
dat[input$xcol]
x
runApp()
runApp()
df()[input$xcol]
x
dat
runApp()
runApp()
df()[input$xcol]
x
B
B()
B()
runApp()
B()
x
x <- df()[input$xcol]
runApp()
runApp()
runApp()
runApp()
dat[input$ycol]
TT()
B()
datalist()
datalist()[input$xcol]
datalist()[,2]
datalist()[2]
datalist()[,]
names(datalist())
datalist()[,input$xcol]
datalist()[3]
typeof(datalist())
typeof(df())
datalist()[x]
df2
df2()
shiny::runApp()
runApp()
TT()
B()
model
test()
datalist()
df2()
str(datalist())
str(datalist()$easyRider)
runApp()
runApp()
dat[input$xcol]
dat[input$zcol]
help(ggplot)
runApp()
dat
input
input$xcol
dat[input$xcol]
input$zcol
input$ycol
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
help(selectInput)
runApp()
runApp()
runApp()
runApp()
test()
models
B
runApp()
str(df())
runApp()
str(df())
str(datalist())
runApp()
runApp()
test()
runApp()
runApp()
test()
B
help(apply)
runApp()
test()
help(split)
runApp()
datalist()
runApp()
runApp()
datalist()
str(datalist())
test()
B
B()
logistic()
TT()
B()
as.character(B())
runApp()
B()
runApp()
runApp()
datalist()
test()
B()
TT()
logistic()
runApp()
B()
TT()
logistic()
runApp()
runApp()
logistic()
runApp()
B()
TT()
as.name(input$xcol)
runApp()
runApp()
runApp()
B()
dat[input$xcol]
dat
runApp()
dat
dat[input$xcol]
runApp()
runApp()
dat[input$xcol]
runApp()
dat
dat[dat$cell=="Hurrycane",]
runApp()
dat
runApp()
prueba
runApp()
logistic(2)
runApp()
str(dat)
str(dat)
runApp()
runApp()
dat
str(dat)
input$xcol
dat$input$xcol
dat[input$xcol]
str(dat[input$xcol])
str(dat$conc)
str(as.numeric(dat[input$xcol]))
runApp()
str(dat$con)
str(dat$resp)
str(as.array(dat[input$xcol]))
str(dat$conc)
str(as.numeric(unlist(dat[input$xcol])))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
help(stat_function)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
??multiplot
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
input$zcol
unlist(dat[input$zcol])
unlist(dat[input$xcol])
as.character(unlist(dat[input$zcol]))
as.name(input$zcol)
as.name(unlist(dat[input$zcol]))
help(facet_wrap)
runApp()
runApp()
data[input$zcol]
dat[input$zcol]
df2()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
help(btnInput)
help(buttonInput)
??buttonInput
??`shiny1
help(shiny)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
y1
runApp()
runApp()
help(abe)
??abe
runApp()
runApp()
runApp()
runApp()
p
gg_color_hue <- function(n) {
hues = seq(15, 375, length=n+1)
hcl(h=hues, l=65, c=100)[1:n]
}
plotMixMdlComps <- function(x, mu, sigma, lam) {
lam * dnorm(x, mu, sigma )
}
clusterDf <- data.frame(cluster = c(6,5,4,8,0,7,3),
mu = c(0.73908779, 0.43233777, 0.28041006, 0.35627709,
0.09330585, 0.18250758, 0.56998734),
sigma = c(0.06472281, 0.03218096, 0.02779751,
0.02208605, 0.02716692, 0.01890661,
0.02995616),
lambda = c(0.042749908, 0.254485536, 0.205602343,
0.404705236, 0.061058220, 0.024166972,
0.007231783))
cols <- nrow(clusterDf) %>%
gg_color_hue()
inDf <- data.frame(x = c(0,1))
p <- ggplot(inDf, aes(x)) +
xlim(0,1) +
ylim(0,10)
for (i in 1:nrow(clusterDf)) {
p <- p + stat_function(geom = "line", fun = plotMixMdlComps,
arg = list(clusterDf[i, "mu"],
clusterDf[i, "sigma"],
clusterDf[i, "lambda"]),
lwd = 1.5, colour = cols[i])
}
p
gg_color_hue <- function(n) {
hues = seq(15, 375, length=n+1)
hcl(h=hues, l=65, c=100)[1:n]
}
plotMixMdlComps <- function(x, mu, sigma, lam) {
lam * dnorm(x, mu, sigma )
}
clusterDf <- data.frame(cluster = c(6,5,4,8,0,7,3),
mu = c(0.73908779, 0.43233777, 0.28041006, 0.35627709,
0.09330585, 0.18250758, 0.56998734),
sigma = c(0.06472281, 0.03218096, 0.02779751,
0.02208605, 0.02716692, 0.01890661,
0.02995616),
lambda = c(0.042749908, 0.254485536, 0.205602343,
0.404705236, 0.061058220, 0.024166972,
0.007231783))
inDf <- data.frame(x = c(0,1))
p <- ggplot(inDf, aes(x)) +
xlim(0,1) +
ylim(0,10)
for (i in 1:nrow(clusterDf)) {
p <- p + stat_function(geom = "line", fun = plotMixMdlComps,
arg = list(clusterDf[i, "mu"],
clusterDf[i, "sigma"],
clusterDf[i, "lambda"]),
lwd = 1.5)
}
p
rm(list=ls())
dev.off()
gg_color_hue <- function(n) {
hues = seq(15, 375, length=n+1)
hcl(h=hues, l=65, c=100)[1:n]
}
plotMixMdlComps <- function(x, mu, sigma, lam) {
lam * dnorm(x, mu, sigma )
}
clusterDf <- data.frame(cluster = c(6,5,4,8,0,7,3),
mu = c(0.73908779, 0.43233777, 0.28041006, 0.35627709,
0.09330585, 0.18250758, 0.56998734),
sigma = c(0.06472281, 0.03218096, 0.02779751,
0.02208605, 0.02716692, 0.01890661,
0.02995616),
lam = c(0.042749908, 0.254485536, 0.205602343,
0.404705236, 0.061058220, 0.024166972,
0.007231783))
inDf <- data.frame(x = c(0,1))
p <- ggplot(inDf, aes(x)) +
xlim(0,1) +
ylim(0,10)
for (i in 1:nrow(clusterDf)) {
p <- p + stat_function(geom = "line", fun = plotMixMdlComps,
arg = list(clusterDf[i, "mu"],
clusterDf[i, "sigma"],
clusterDf[i, "lambda"]),
lwd = 1.5)
}
p
rm(list=ls())
dev.off()
gg_color_hue <- function(n) {
hues = seq(15, 375, length=n+1)
hcl(h=hues, l=65, c=100)[1:n]
}
plotMixMdlComps <- function(x, mu, sigma, lam) {
lam * dnorm(x, mu, sigma )
}
clusterDf <- data.frame(cluster = c(6,5,4,8,0,7,3),
mu = c(0.73908779, 0.43233777, 0.28041006, 0.35627709,
0.09330585, 0.18250758, 0.56998734),
sigma = c(0.06472281, 0.03218096, 0.02779751,
0.02208605, 0.02716692, 0.01890661,
0.02995616),
lam = c(0.042749908, 0.254485536, 0.205602343,
0.404705236, 0.061058220, 0.024166972,
0.007231783))
inDf <- data.frame(x = c(0,1))
p <- ggplot(inDf, aes(x)) +
xlim(0,1) +
ylim(0,10)
for (i in 1:nrow(clusterDf)) {
p <- p + stat_function(geom = "line", fun = plotMixMdlComps,
arg = list(clusterDf[i, "mu"],
clusterDf[i, "sigma"],
clusterDf[i, "lam"]),
lwd = 1.5)
}
p
rm(list=ls())
dev.off()
gg_color_hue <- function(n) {
hues = seq(15, 375, length=n+1)
hcl(h=hues, l=65, c=100)[1:n]
}
plotMixMdlComps <- function(x, mu, sigma, lam) {
lam * dnorm(x, mu, sigma )
}
clusterDf <- data.frame(cluster = c(6,5,4,8,0,7,3),
mu = c(0.73908779, 0.43233777, 0.28041006, 0.35627709,
0.09330585, 0.18250758, 0.56998734),
sigma = c(0.06472281, 0.03218096, 0.02779751,
0.02208605, 0.02716692, 0.01890661,
0.02995616),
lam = c(0.042749908, 0.254485536, 0.205602343,
0.404705236, 0.061058220, 0.024166972,
0.007231783))
inDf <- data.frame(x = c(0,1))
p <- ggplot(inDf, aes(x)) +
xlim(0,1) +
ylim(0,10)
for (i in 1:nrow(clusterDf)) {
p <- p + stat_function(geom = "line", fun = plotMixMdlComps,
args = list(clusterDf[i, "mu"],
clusterDf[i, "sigma"],
clusterDf[i, "lam"]),
lwd = 1.5)
}
p
clusterDf
nrow(clusterDF)
nrow("clusterDF")
rm(list=ls())
dev.off()
gg_color_hue <- function(n) {
hues = seq(15, 375, length=n+1)
hcl(h=hues, l=65, c=100)[1:n]
}
plotMixMdlComps <- function(x, mu, sigma, lam) {
lam * dnorm(x, mu, sigma )
}
clusterDf <- data.frame(cluster = c(6,5,4,8,0,7,3),
mu = c(0.73908779, 0.43233777, 0.28041006, 0.35627709,
0.09330585, 0.18250758, 0.56998734),
sigma = c(0.06472281, 0.03218096, 0.02779751,
0.02208605, 0.02716692, 0.01890661,
0.02995616),
lam = c(0.042749908, 0.254485536, 0.205602343,
0.404705236, 0.061058220, 0.024166972,
0.007231783))
inDf <- data.frame(x = c(0,1))
p <- ggplot(inDf, aes(x)) +
xlim(0,1) +
ylim(0,10)
for (i in 1:nrow(clusterDf)) {
p <- p + stat_function(geom = "line", fun = plotMixMdlComps,
lwd = 1.5)
}
p
help(geom_smooth)
help(sd)
runApp()
help(scales)
runApp()
runApp()
runApp()
runApp()
unique(dat[input$zcol])
runApp()
runApp()
runApp()
runApp()
runApp()
B
B[n]
B[1]
B
logistic[n]
runApp()
getPar(prueba)$params$bottom
runApp()
getPar(prueba)$params$bottom
getPar(prueba)
shiny::runApp()
runApp()
df2()
names(df2())
unique(df2())
as.numeric(unlist(dat[input$xcol]))
runApp()
runApp()
runApp()
typeof(df2())
str(df2())
length(df2())
length(unique(df2()))
nrow(df2())
runApp()
runApp()
