dat[[compoundCol()]]
runApp()
runApp()
install.packages("DT")
runApp()
runApp()
help("renderDataTable")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
str(mySummary)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
help(loglp)
??loglp
log10(1)
log10(0)
log1p(0)
log1p(1)
runApp()
log1p(13)
log1p(0.025)
help(log1p)
runApp()
runApp()
runApp()
runApp()
runApp()
x
log10(x)
runApp()
log(0)
log(0, base = exp(2))
log2(0)
log1p(0)
runApp()
runApp()
dat[[xCol]]
runApp()
runApp()
runApp()
runApp()
runApp()
dat[[xCol]]
str(dat[[xCol]])
length(dat[[xCol]])
runApp()
log1p(-Inf)
log10(-Inf)
log(-Inf)
min(dat[[xCol]])
runApp()
min(dat[[xCol]])
dat
dat
min(dat[[xCol]])
runApp()
runApp()
dat[[xCol]]
runApp()
dat[[xCol]]
test <- dat[[xCol]][dat[[xCol]] == -8] <- 800
test
test <- [dat[[xCol]] == -8] <- 800
dat$xCol[dat$xCol == -8] <- 1
dat$xCol
dat
dat[[xCol]][dat[[xCol]] == -1] <- 100
dat[[xCol]]
runApp()
dat[[xCol]]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
df()
dat3
dat3()
runApp()
df()
dat3
dat3()
data
dat2()
dat2
df()
runApp()
dat
df
df()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
df()
runApp()
runApp()
xLog
xLog()
runApp()
df()
df()[[xLog]]
xLog
xLog()
str(xLog)
str(xLog())
as.name(str(xLog()))
as.name(xLog())
as.name(xCol())
runApp()
runApp()
df8()
df8
df()
df3
df3()
datalist2()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
help(dput)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
help(nplr)
runApp()
runApp()
runApp()
runApp()
runApp()
help("suppressWarnings")
runApp()
runApp()
runApp()
runApp()
help(try)
runApp()
runApp()
runApp()
Q
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
help(warn)
??warn
??warn
runApp()
??options
??warn
runApp()
runApp()
Q
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
dat[[xCol]]
runApp()
dat
dat[[xCol]]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
Q
runApp()
runApp()
runApp()
runApp()
runApp()
Q
runApp()
dat
dat[[xCol]]
dat[[as.character(xCol)]]
as.character(dat[[xCol]])
name[[xCol]]
names[[xCol]]
as.name(dat[[xCol]])
dat[[xCol]]
as.name(dat[[xCol]])
colnames(dat)
runApp()
as.character(xCol)
dat(as.character(xCol))
data[[xCol]]
dat[[xCol]]
as.name(dat[[xCol]])
as.name(unlist(dat[[xCol]]))
head(dat[[xCol]])
xCol
runApp()
dat
runApp()
dat[, "x"]
dat[xCol]
dat[[xCol]]
str(dat[[xCol]])
str(dat[, "x"])
dat[[,xCol]]
runApp()
runApp()
runApp()
Q
runApp()
runApp()
runApp()
datos
dat[[xCol]]
datP[[input$xcol]]
dat[[input$xcol]]
input$xcol
"input$xcol"
dat[, input$xcol]
dat[, xCol]
dat["x"]
dat[, "y"]
dat[, "x"]
runApp()
runApp()
runApp()
pki.app.s4s.get.starting.parameters <- function(input.data, fixed = list()) {
# Set starting parameters
x <- input.data[, xCol]
y <- input.data[, yCol]
n <- nrow(input.data)
xy <- x * y
start <- list()
if (!"a" %in% names(fixed)) {
start["a"] = quantile(y, 1, na.rm = TRUE)[[1]]
}
if (!"b" %in% names(fixed)) {
start["b"] = quantile(y, 0, na.rm = TRUE)[[1]]
}
if (length(y) > 2) {
mid.y <- (max(y) + min(y)) / 2
start["c"] = input.data[which.min(abs(input.data$y - mid.y)), "x"]
} else {
start["c"] = mean(x, na.rm = TRUE)[[1]]
}
d = 0
if (!"d" %in% names(fixed)) {
d <- (n * (sum(xy) - sum(x) * sum(y))) / abs(n * (sum(x ^ 2) - sum(y ^ 2)))
}
if (is.na(d)) {
start["d"] <- 0
} else if (d < 1) {
start["d"] = floor(d)
} else {
start["d"] = ceiling(d)
}
return(start)
}
runApp()
pki.app.s4s.get.starting.parameters <- function(input.data, fixed = list()) {
# Set starting parameters
x <- input.data[, xCol]
y <- input.data[, yCol]
n <- nrow(input.data)
xy <- x * y
start <- list()
if (!"a" %in% names(fixed)) {
start["a"] = quantile(y, 1, na.rm = TRUE)[[1]]
}
if (!"b" %in% names(fixed)) {
start["b"] = quantile(y, 0, na.rm = TRUE)[[1]]
}
if (length(y) > 2) {
mid.y <- (max(y) + min(y)) / 2
start["c"] = input.data[which.min(abs(input.data$y - mid.y)), "x"]
} else {
start["c"] = mean(x, na.rm = TRUE)[[1]]
}
d = 0
if (!"d" %in% names(fixed)) {
d <- (n * (sum(xy) - sum(x) * sum(y))) / abs(n * (sum(x ^ 2) - sum(y ^ 2)))
}
if (is.na(d)) {
start["d"] <- 0
} else if (d < 1) {
start["d"] = floor(d)
} else {
start["d"] = ceiling(d)
}
return(start)
}
runApp()
datos
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
dat[[y]]
dat[[, "y"]]
runApp()
runApp()
runApp()
runApp()
dat
colnames(dat)
colnames(dat)[xCol]
colnames(dat)[[xCol]]
xCol
colnames(dat[[xCol]])
colnames(dat[xCol])
runApp()
runApp()
dat
colnames(dat[xCol])
z <- colnames(dat[xCol]) <- "x"
z
colnames(dat[xCol])
colnames(dat[xCol]) <- "x"
colnames(dat[xCol])
names(dat)
names(dat) == xCol
names(dat)[names(dat) == xCol] <- "x"
names(dat)
runApp()
runApp()
dat
dat[xCol]
dat[[xCol]]
xCol
dat["x"]
dat[x]
dat[["x"]]
runApp()
runApp()
runApp()
runApp()
runApp()
dat
dat
dat[[compoundCol]]
dat[["x"]]
dat[["y"]]]
dat[["y"]]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
dat
dat[[xCol]]
dat[xCol]
dat["x"]
dat[x]
xCol
dat[[xCol]]
runApp()
runApp()
runApp()
runApp()
dat[["x"]]
dat
dat[[xCol]]
names(dat)[names(dat) == xCol] <- "prueba"
dat[[xCol]]
dat
names(dat)[names(dat) == "x"] <- "prueba"
dat
runApp()
dat
xCol
names(xCol)
as.name(xCol)
names(dat)[names(dat) == xCol] <- "x"
dat[[xCol]]
names(dat)[names(dat) == as.name(yCol)] <- "y"
dat
dat[[yCol]]
yCol
input$ycol
as.character(yCol)
yCol
names(dat)
yCol
colnames(dat)[colnames(dat) == yCol] <- "y"
dat
yCol
names(yCol)
names(as.name(yCol))
as.name(yCol)
colnames(yCol)
names(as.character(yCol))
names(as.data.frame(yCol))
yCol
as.data.frame(yCol)
yCol
runApp()
dat
xCol
str(names(dat))
str(xCol)
xCol <- "x"
xCol
yCol
yCol <- "y"
yCol
dat
runApp()
runApp()
dat
names(dat)
yCol
runApp()
dat
yCol
dat[[yCol]]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
dat[[compoundCol]]
datos
runApp()
runApp()
runApp()
runApp()
runApp()
