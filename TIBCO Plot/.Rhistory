shiny::runApp()
runApp()
runApp()
runApp()
install.packages(nls)
install.packages("nls")
install.packages("nlstools")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
help(read.table
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
help(gsub)
runApp()
runApp()
runApp()
help(readlines)
??readlines
runApp()
runApp()
runApp()
help(inherits)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('appplot.R')
runApp('appplot.R')
runApp('appplot.R')
runApp('appplot.R')
help(cbind)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
help(plot)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("ggplot2")
runApp()
runApp()
runApp()
runApp()
runApp()
help(rnorm
)
runApp()
help(tags$br)
??tags$br()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
help(plot)
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
install.packages("shinydashboard")
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("DT")
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
??overlow-x
??overflow
help(style)
??style
runApp()
runApp()
help(box)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
help(switch)
runApp()
runApp()
help(do.call)
??allx
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
help(mfrow)
??mfrow
help(ddply)
help(qplot)
help(mean)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
help("dev.new")
help(ggplot)
??facet_grid
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('prueba.r')
help(ggplot)
runApp()
warning()
wanings()
warnings()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
help(aes)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("dataset")
shinyServer(function(input, output) {
createPlot <- function(df, colx, coly) {
x <- names(df)[colx]
y <- names(df)[coly]
ggplot(data=df, aes_string(x = x, y = y) ) + geom_line()
}
Y <- reactive({
x
})
# Generate a summary of the dataset
output$summary <- renderPrint({
dataset <- x
summary(dataset)
})
# Show the first "n" observations
output$view <- renderTable({
head(x, n = input$obs)
})
# create line plot (I took this from https://gist.github.com/pssguy/4171750)
output$plot <- reactivePlot(function() {
df <- Y()
print(createPlot(df, colx=input$xa, coly=input$ya))
})
})
shinyUI(pageWithSidebar(
# Application title
headerPanel("Sample Proj"),
# Sidebar with controls to select a dataset and specify the number
# of observations to view
sidebarPanel(
numericInput("obs", "Number of observations to view:", 10)
,numericInput("xa", "Column to plot as X-axis:", 5)
,numericInput("ya", "Column to plot as Y-axis:", 6)
),
# Show a summary of the dataset and an HTML table with the requested
# number of observations
mainPanel(
tabsetPanel(
tabPanel("Table", tableOutput("view")),
tabPanel("LineGraph", plotOutput("plot"))
)
)
))
shiny::runApp()
help(fill)
runApp()
runApp()
help(aes_string)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
help(mean)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
help(summary)
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
??start.list
runApp()
runApp()
runApp()
help(iter)
??iter
runApp()
help(cex.main)
??cex.main
runApp()
runApp()
runApp()
runApp()
help("geom_smooth")
runApp()
runApp()
help(quantile)
help(abs)
