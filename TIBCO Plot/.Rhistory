<<<<<<< HEAD
=======
str(nplrs)
nplrs
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
help(do.call)
runApp()
runApp()
runApp()
runApp()
runApp()
instal.packages("compare")
install.packages("compare")
runApp()
runApp()
mySummary.nplr
mySummary.nls
mySummary
mySummary <- compare(mySummary.nplr, mySummary.nls, allowAll = TRUE)}
mySummary <- compare(mySummary.nplr, mySummary.nls, allowAll = TRUE)
mySummary
mySummary <- do.call("rbind",list(mySummary.nplr, mySummary.nls))
mySummary
runApp()
runApp()
runApp()
runApp()
mySummary.nls
mySummary.nplr
mySummary <- do.call("rbind",list(mySummary.nplr, mySummary.nls))
str(mySummary.nplr)
str(mySummary.nls)
runApp()
mySummary.nplr
str(mySummary.nplr)
runApp()
runApp()
runApp()
mySummary.nplr
str(mySummary.nplr)
mySummary <- do.call("rbind",list(mySummary.nplr, mySummary.nls))
mySummary
runApp()
str(mySummaryÃ§
)
str(mySummary.nplr)
mySummary <- do.call("rbind",list(mySummary.nplr, mySummary.nls))
mySummary
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
df()
DFunction()
dat2()
datalist2()
runApp()
df2()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
str(fit.parameters.nplr)
fit.parameters.nplr[,c(3:7)]<- sapply(fit.parameters.nplr[,c(3:7)], as.character)
fit.parameters.nplr[,c(3:7)]<- sapply(fit.parameters.nplr[,c(3:7)], as.numeric)
str(fit.parameters.nplr)
runApp()
runApp()
runApp()
runApp()
runApp()
DFunction()
DFunction
runApp()
DFunction
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
DFunction
dat2
runApp()
DFunction
dat2
dat2()
dat2()
runApp()
runApp()
dat2()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
dat2()
runApp()
xCol()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
nls_df
gg2
i
i[[compoundCol]]
x
runApp()
runApp()
nls_df
runApp()
nls_df
runApp()
Q
runApp()
runApp()
runApp()
runApp()
runApp()
levels(dat[[compoundCol]]
)
dat
levels(dat)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
nplr_df
>>>>>>> DimRed
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
dat
runApp()
dat
runApp()
runApp()
runApp()
nls_df
DFunction
nplr_df
x
runApp()
runApp()
runApp()
nls_df
nplr_df
runApp()
nplr_df
Q
runApp()
runApp()
runApp()
dat
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
help("scale_fill_manual")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("plotly")
install.packages("plotly")
shiny::runApp()
runApp()
help(ggplotly)
??ggplotly
??plotly
install.packages("plotly")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
help("ggplotly")
runApp()
runApp()
runApp()
runApp()
install_version("plotly", version = "4.6.0", repos = "http://cran.us.r-project.org")
require(devtools)
install_version("plotly", version = "4.6.0", repos = "http://cran.us.r-project.org")
runApp()
runApp()
install.packages("htmltools")
runApp()
runApp()
install.packages("htmltools")
install.packages("htmltools")
shiny::runApp()
require(devtools)
install_version("plotly", version = "4.6.0", repos = "http://cran.us.r-project.org")
install_version("plotly", version = "4.6.0", repos = "http://cran.us.r-project.org")
install.package("plotly")
install.packages("plotly")
install_version("plotly", version = "4.6.0", repos = "http://cran.us.r-project.org")
runApp()
runApp()
runApp()
devtools::install_github('hadley/ggplot2')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
help(ggplotly)
runApp()
runApp()
runApp()
runApp()
devtools::install_github('hadley/ggplot2')
shiny::runApp()
install.packages("ggplot2")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
his
df()
df()
his
xCol
his[[xCol]]
runApp()
runApp()
runApp()
df()
his
xCol
his[[xCol]]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
exp(0.45)
log(2.82)
log10(2.82)
help(exp)
10^0.45
10^-0.7688
runApp()
runApp()
runApp()
sumi$value[["xInfl"]]
10^sumi$value[["xInfl"]]
str(sumi$value[["xInfl"]])
as.numeric(sumi$value[["xInfl"]])
as.character(sumi$value[["xInfl"]])
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
install.packages("XLConnect")
runApp()
install.packages("XLConnectJars")
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
install.packages("tsne")
install.packages("Rtsne")
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
dt
tsne
tsn
runApp()
Q
runApp()
runApp()
runApp()
Labels
dt$input$zcol
dt
dat$input$zcol
dat[[input$zcol]]
dt[[input$zcol]]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
cCol
cCol
cCol
yCol
yCol()
dat[[yCol()]]
dt[[cCol]]
cCol
cCol$resp
str(yCol())
str(cCol)
cCol[1]
dt[[cCol]][1]
dt[[cCol[1]]]
dt[[cCol[2]]]
ff <- as.data.frame(dt[[cCol]])
ff <- as.data.frame(cCol)
ff
dt[[]]
df[[cCol[,]]]
cCol
cCol[1]
cCol[]
df[[cCol[]]]
df[[cCol[1]]]
dt[[cCol[]]]
dt[[cCol[,]]]
cCol[,]
dt[[cCol[:]]]
cCol[]
cCol
runApp()
runApp()
cCol
cCol
cCol
runApp()
runApp()
runApp()
runApp()
cl
i
cCol
i
cl
dt[[cCol[1]]]
names(dt[[cCol[1]]])
View(dt)
names(dt)
names(dt[yCol])
names(dt[yCol()])
names(dt[[yCol()]])
dt[yCol()]
Q
runApp()
cCol
cl
runApp()
runApp()
cl
i
names(i)
dt[cCol]
runApp()
Q
runApp()
help(plot)
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
tsne
colors
colors[dt[[input$zcol]]]
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
tsne$Y
tsne$Y[1]
tsne$Y$1
tsne$Y[,1]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
<<<<<<< HEAD
devtools::install_github('hadley/ggplot2')
shiny::runApp()
install.packages("ggplot2")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
his
df()
df()
his
xCol
his[[xCol]]
runApp()
runApp()
runApp()
df()
his
xCol
his[[xCol]]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
exp(0.45)
log(2.82)
log10(2.82)
help(exp)
10^0.45
10^-0.7688
runApp()
runApp()
runApp()
sumi$value[["xInfl"]]
10^sumi$value[["xInfl"]]
str(sumi$value[["xInfl"]])
as.numeric(sumi$value[["xInfl"]])
as.character(sumi$value[["xInfl"]])
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
install.packages("XLConnect")
runApp()
install.packages("XLConnectJars")
runApp()
runApp()
runApp()
=======
>>>>>>> DimRed
