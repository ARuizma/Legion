runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
dat
df2
DAT
dat
dat2
var
nplr_df
nls_df
dat
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
x
Q
runApp()
runApp()
runApp()
runApp()
runApp()
dat
dat2
runApp()
runApp()
runApp()
runApp()
runApp()
dat
dat2
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
sumi
sumi$npar
sumi$params.bottom
sumi
sumi$nar
sumi$npar
npar
str(sumi)
s <- as.list(sumi)
sumi
runApp()
runApp()
sumi
sumi[[npar]]
sumi
sumi[[value]][[npar]]
sumi$value
sumir$value·npar
sumi$value$npar
sumi$value[[npar]]
sumi$npar
sumi$value[[params.s]]
sumi$value
str(sumi$value)
str(sumi)
levels_split <- strsplit(levels(sumi$value), ",")
levels_split
lapply(levels_split, as.numeric)
s <- lapply(levels_split, as.numeric)
lapply(levels_split, as.numeric)
s <- lapply(levels_split, as.numeric)
runApp()
runApp()
runApp()
df2
names(df2)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
sumi
df2
i
names(df2)
df2
sumi
names(i)
runApp()
runApp()
runApp()
runApp()
runApp()
names(df2)
i
names(df2$i)
names(i)
as.names(i)
as.name(i=
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
fit.parameters
fit.parameters$Compound
fit.parameters$Compound <- names(df2)
fit.parameters
df2
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
nlss
str(nlss)
str(nplrs)
nplrs
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
help(do.call)
runApp()
runApp()
runApp()
runApp()
runApp()
instal.packages("compare")
install.packages("compare")
runApp()
runApp()
mySummary.nplr
mySummary.nls
mySummary
mySummary <- compare(mySummary.nplr, mySummary.nls, allowAll = TRUE)}
mySummary <- compare(mySummary.nplr, mySummary.nls, allowAll = TRUE)
mySummary
mySummary <- do.call("rbind",list(mySummary.nplr, mySummary.nls))
mySummary
runApp()
runApp()
runApp()
runApp()
mySummary.nls
mySummary.nplr
mySummary <- do.call("rbind",list(mySummary.nplr, mySummary.nls))
str(mySummary.nplr)
str(mySummary.nls)
runApp()
mySummary.nplr
str(mySummary.nplr)
runApp()
runApp()
runApp()
mySummary.nplr
str(mySummary.nplr)
mySummary <- do.call("rbind",list(mySummary.nplr, mySummary.nls))
mySummary
runApp()
str(mySummaryç
)
str(mySummary.nplr)
mySummary <- do.call("rbind",list(mySummary.nplr, mySummary.nls))
mySummary
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
df()
DFunction()
dat2()
datalist2()
runApp()
df2()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
str(fit.parameters.nplr)
fit.parameters.nplr[,c(3:7)]<- sapply(fit.parameters.nplr[,c(3:7)], as.character)
fit.parameters.nplr[,c(3:7)]<- sapply(fit.parameters.nplr[,c(3:7)], as.numeric)
str(fit.parameters.nplr)
runApp()
runApp()
runApp()
runApp()
runApp()
DFunction()
DFunction
runApp()
DFunction
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
DFunction
dat2
runApp()
DFunction
dat2
dat2()
dat2()
runApp()
runApp()
dat2()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
dat2()
runApp()
xCol()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
nls_df
gg2
i
i[[compoundCol]]
x
runApp()
runApp()
nls_df
runApp()
nls_df
runApp()
Q
runApp()
runApp()
runApp()
runApp()
runApp()
levels(dat[[compoundCol]]
)
dat
levels(dat)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
nplr_df
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
dat
runApp()
dat
runApp()
runApp()
runApp()
nls_df
DFunction
nplr_df
x
runApp()
runApp()
runApp()
nls_df
nplr_df
runApp()
nplr_df
Q
runApp()
runApp()
runApp()
dat
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
help("scale_fill_manual")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("plotly")
install.packages("plotly")
shiny::runApp()
runApp()
help(ggplotly)
??ggplotly
??plotly
install.packages("plotly")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
help("ggplotly")
runApp()
runApp()
runApp()
runApp()
install_version("plotly", version = "4.6.0", repos = "http://cran.us.r-project.org")
require(devtools)
install_version("plotly", version = "4.6.0", repos = "http://cran.us.r-project.org")
runApp()
runApp()
install.packages("htmltools")
runApp()
runApp()
install.packages("htmltools")
install.packages("htmltools")
shiny::runApp()
require(devtools)
install_version("plotly", version = "4.6.0", repos = "http://cran.us.r-project.org")
install_version("plotly", version = "4.6.0", repos = "http://cran.us.r-project.org")
install.package("plotly")
install.packages("plotly")
install_version("plotly", version = "4.6.0", repos = "http://cran.us.r-project.org")
runApp()
runApp()
runApp()
devtools::install_github('hadley/ggplot2')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
help(ggplotly)
runApp()
runApp()
runApp()
runApp()
devtools::install_github('hadley/ggplot2')
shiny::runApp()
install.packages("ggplot2")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
his
df()
df()
his
xCol
his[[xCol]]
runApp()
runApp()
runApp()
df()
his
xCol
his[[xCol]]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
