shiny::runApp()
runApp()
runApp()
runApp()
dat[[y]]
dat[[, "y"]]
runApp()
runApp()
runApp()
runApp()
dat
colnames(dat)
colnames(dat)[xCol]
colnames(dat)[[xCol]]
xCol
colnames(dat[[xCol]])
colnames(dat[xCol])
runApp()
runApp()
dat
colnames(dat[xCol])
z <- colnames(dat[xCol]) <- "x"
z
colnames(dat[xCol])
colnames(dat[xCol]) <- "x"
colnames(dat[xCol])
names(dat)
names(dat) == xCol
names(dat)[names(dat) == xCol] <- "x"
names(dat)
runApp()
runApp()
dat
dat[xCol]
dat[[xCol]]
xCol
dat["x"]
dat[x]
dat[["x"]]
runApp()
runApp()
runApp()
runApp()
runApp()
dat
dat
dat[[compoundCol]]
dat[["x"]]
dat[["y"]]]
dat[["y"]]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
dat
dat[[xCol]]
dat[xCol]
dat["x"]
dat[x]
xCol
dat[[xCol]]
runApp()
runApp()
runApp()
runApp()
dat[["x"]]
dat
dat[[xCol]]
names(dat)[names(dat) == xCol] <- "prueba"
dat[[xCol]]
dat
names(dat)[names(dat) == "x"] <- "prueba"
dat
runApp()
dat
xCol
names(xCol)
as.name(xCol)
names(dat)[names(dat) == xCol] <- "x"
dat[[xCol]]
names(dat)[names(dat) == as.name(yCol)] <- "y"
dat
dat[[yCol]]
yCol
input$ycol
as.character(yCol)
yCol
names(dat)
yCol
colnames(dat)[colnames(dat) == yCol] <- "y"
dat
yCol
names(yCol)
names(as.name(yCol))
as.name(yCol)
colnames(yCol)
names(as.character(yCol))
names(as.data.frame(yCol))
yCol
as.data.frame(yCol)
yCol
runApp()
dat
xCol
str(names(dat))
str(xCol)
xCol <- "x"
xCol
yCol
yCol <- "y"
yCol
dat
runApp()
runApp()
dat
names(dat)
yCol
runApp()
dat
yCol
dat[[yCol]]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
dat[[compoundCol]]
datos
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
help(facet_wrap)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("DT")
runApp()
library(DT)
DT
library(nplr)
library(DT)
install.packages("DT")
library(DT)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
df()
runApp()
df()
xCol
xCol()
var
var()
df$input$xcol
df <- df()
df
df$input$xcol
df[[xCol]]
df[[xCol()]]
runApp()
df()
var()
log10(var())
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
df
df()
DFunction()
help(aggregate)
runApp()
runApp()
df()
DFunction()
runApp()
df()
dat
DFunction
DFunction()
runApp()
DFunction
DFunction()
runApp()
runApp()
DFunction
DFunction()
runApp()
DFunction()
runApp()
DFunction
DFunction()
xCol
dat[xCol]
dat[[xCol]]
runApp()
dat
df()[[xCol]]
df()
df()[xCol]
compoundCol
compoundCol()
df()
runApp()
DFunction
DFunction()
DFunction()
dat
runApp()
DFunction()
df()[[xCol]]
df[[xCol]]
runApp()
df[[xCol]]
df[[x]]
df()
DFunction()
runApp()
DFunction()
runApp()
runApp()
DFunction()
runApp()
DFunction()
runApp()
dat2()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
DFunction
DFunction()
runApp()
DFunction()
runApp()
DFunction()
dat2()
DFunction()[[compoundCol]]
DFunction
dat2
dat2()
DFunction
runApp()
runApp()
runApp()
DFunction()
dat2()
DFunction()
DFunction <- DFunction()
DFunction
DFunction[[compoundCol]]
DFunction
DFunction[[Compound]]
DFunction$input$zcol
runApp()
dat2()
runApp()
runApp()
dat2()
DFunction
DFunction[[compoundCol]]
str(DFunction)
DFunction$Compound
DFunction[Compound]
DFunction[[Compound]]
runApp()
dat2()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
dat
df()
names(df())
dat
df()$yCol
runApp()
runApp()
runApp()
names(df())
names(df()[[yCol]])
df()[[yCol]]
df()[yCol]
df()$input$ycol
df
df()
names(df())
df5 <- df()
df5
names(df5)
df5[[yCol]]
names(df5) == yCol
yCol
yCol(df())
runApp()
df5 <- df()
df5
names(df5)[names(df5) == yCol]
runApp()
yCol
dat
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
dat
yCol
dat[[yCol]]
dat$yCol
names(dat)
names(dat[3])
runApp()
feature
feature()
input$ycol
names(input$ycol)
runApp()
input$ycol
shiny::runApp()
runApp()
runApp()
install.packages("minpack.lm")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
